@model IEnumerable<GymManagement.Web.Data.Models.LopHoc>
@{
    ViewData["Title"] = "Qu·∫£n l√Ω l·ªõp h·ªçc";
    Layout = "_Layout";
}

<div class="p-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-3xl font-bold text-gray-900 mb-2">üéì Qu·∫£n l√Ω l·ªõp h·ªçc</h1>
            <p class="text-gray-600">Qu·∫£n l√Ω c√°c l·ªõp h·ªçc v√† hu·∫•n luy·ªán vi√™n</p>
        </div>
        @if (User.IsInRole("Admin"))
        {
            <a href="@Url.Action("Create")" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                ‚ûï Th√™m l·ªõp h·ªçc m·ªõi
            </a>
        }
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-2">T√¨m ki·∫øm</label>
                <input type="text" id="searchInput" placeholder="Nh·∫≠p t√™n l·ªõp h·ªçc..." 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
            <div>
                <label for="statusFilter" class="block text-sm font-medium text-gray-700 mb-2">Tr·∫°ng th√°i</label>
                <select id="statusFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">T·∫•t c·∫£</option>
                    <option value="OPEN">ƒêang m·ªü</option>
                    <option value="CLOSED">ƒê√£ ƒë√≥ng</option>
                    <option value="FULL">ƒê√£ ƒë·∫ßy</option>
                </select>
            </div>
            <div>
                <label for="trainerFilter" class="block text-sm font-medium text-gray-700 mb-2">Hu·∫•n luy·ªán vi√™n</label>
                <select id="trainerFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">T·∫•t c·∫£</option>
                    @if (Model != null)
                    {
                        @foreach (var trainer in Model.Where(c => c.Hlv != null).Select(c => c.Hlv).Distinct())
                        {
                            <option value="@trainer.NguoiDungId">@trainer.Ho @trainer.Ten</option>
                        }
                    }
                </select>
            </div>
            <div>
                <label for="dayFilter" class="block text-sm font-medium text-gray-700 mb-2">Th·ª© trong tu·∫ßn</label>
                <select id="dayFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">T·∫•t c·∫£</option>
                    <option value="Th·ª© 2">Th·ª© 2</option>
                    <option value="Th·ª© 3">Th·ª© 3</option>
                    <option value="Th·ª© 4">Th·ª© 4</option>
                    <option value="Th·ª© 5">Th·ª© 5</option>
                    <option value="Th·ª© 6">Th·ª© 6</option>
                    <option value="Th·ª© 7">Th·ª© 7</option>
                    <option value="Ch·ªß nh·∫≠t">Ch·ªß nh·∫≠t</option>
                </select>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <!-- Classes Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="classesGrid">
            @foreach (var lopHoc in Model)
            {
                <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow class-card" 
                     data-name="@lopHoc.TenLop.ToLower()" 
                     data-status="@lopHoc.TrangThai"
                     data-trainer="@(lopHoc.HlvId ?? 0)"
                     data-day="@lopHoc.ThuTrongTuan">
                    
                    <!-- Class Header -->
                    <div class="bg-gradient-to-r from-green-500 to-blue-500 p-6 text-white">
                        <div class="flex justify-between items-start mb-4">
                            <h3 class="text-xl font-bold">@lopHoc.TenLop</h3>
                            <span class="px-2 py-1 text-xs rounded-full @(lopHoc.TrangThai == "OPEN" ? "bg-green-500" : lopHoc.TrangThai == "CLOSED" ? "bg-red-500" : "bg-yellow-500")">
                                @switch (lopHoc.TrangThai)
                                {
                                    case "OPEN": <span>ƒêang m·ªü</span>; break;
                                    case "CLOSED": <span>ƒê√£ ƒë√≥ng</span>; break;
                                    case "FULL": <span>ƒê√£ ƒë·∫ßy</span>; break;
                                    default: <span>@lopHoc.TrangThai</span>; break;
                                }
                            </span>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold mb-1">@lopHoc.GioBatDau.ToString("HH:mm") - @lopHoc.GioKetThuc.ToString("HH:mm")</div>
                            <div class="text-sm opacity-90">@lopHoc.ThuTrongTuan</div>
                        </div>
                    </div>

                    <!-- Class Details -->
                    <div class="p-6">
                        <div class="space-y-3 mb-6">
                            <!-- Trainer -->
                            <div class="flex items-center text-gray-600">
                                <svg class="w-4 h-4 mr-3 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                                <span>
                                    @if (lopHoc.Hlv != null)
                                    {
                                        <span>HLV: @lopHoc.Hlv.Ho @lopHoc.Hlv.Ten</span>
                                    }
                                    else
                                    {
                                        <span class="text-orange-600">Ch∆∞a ph√¢n c√¥ng HLV</span>
                                    }
                                </span>
                            </div>

                            <!-- Capacity -->
                            <div class="flex items-center text-gray-600">
                                <svg class="w-4 h-4 mr-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                </svg>
                                <span>S·ª©c ch·ª©a: @lopHoc.SucChua ng∆∞·ªùi</span>
                            </div>

                            <!-- Duration -->
                            @if (lopHoc.ThoiLuong.HasValue)
                            {
                                <div class="flex items-center text-gray-600">
                                    <svg class="w-4 h-4 mr-3 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <span>Th·ªùi l∆∞·ª£ng: @lopHoc.ThoiLuong ph√∫t</span>
                                </div>
                            }

                            <!-- Custom Price -->
                            @if (lopHoc.GiaTuyChinh.HasValue)
                            {
                                <div class="flex items-center text-green-600 font-semibold">
                                    <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                                    </svg>
                                    <span>Gi√°: @lopHoc.GiaTuyChinh.Value.ToString("N0") VNƒê</span>
                                </div>
                            }

                            <!-- Description -->
                            @if (!string.IsNullOrEmpty(lopHoc.MoTa))
                            {
                                <div class="text-sm text-gray-600 bg-gray-50 p-3 rounded-md">
                                    <p>@lopHoc.MoTa</p>
                                </div>
                            }

                            <!-- Registration Count -->
                            <div class="flex items-center justify-between bg-blue-50 p-3 rounded-md">
                                <span class="text-sm text-blue-800">ƒê√£ ƒëƒÉng k√Ω:</span>
                                <span class="font-bold text-blue-600">@lopHoc.DangKys.Count(d => d.TrangThai == "ACTIVE")/@lopHoc.SucChua</span>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="flex gap-2">
                            <a href="@Url.Action("Details", new { id = lopHoc.LopHocId })"
                               class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-800 px-3 py-2 rounded-md text-sm font-medium text-center transition-colors">
                                üëÅÔ∏è Chi ti·∫øt
                            </a>
                            @if (User.IsInRole("Admin"))
                            {
                                <a href="@Url.Action("Edit", new { id = lopHoc.LopHocId })"
                                   class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-md text-sm font-medium text-center transition-colors">
                                    ‚úèÔ∏è S·ª≠a
                                </a>
                                <button type="button" onclick="deleteClass(@lopHoc.LopHocId, '@lopHoc.TenLop')"
                                        class="flex-1 bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded-md text-sm font-medium text-center transition-colors">
                                    üóëÔ∏è X√≥a
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Empty State -->
        <div class="bg-white rounded-lg shadow-md p-12 text-center">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
            </svg>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Ch∆∞a c√≥ l·ªõp h·ªçc n√†o</h3>
            <p class="text-gray-600 mb-4">H·ªá th·ªëng ch∆∞a c√≥ l·ªõp h·ªçc n√†o. H√£y t·∫°o l·ªõp h·ªçc ƒë·∫ßu ti√™n.</p>
            @if (User.IsInRole("Admin"))
            {
                <a href="@Url.Action("Create")" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                    ‚ûï T·∫°o l·ªõp h·ªçc ƒë·∫ßu ti√™n
                </a>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        // Search and filter functionality
        document.getElementById('searchInput').addEventListener('input', filterClasses);
        document.getElementById('statusFilter').addEventListener('change', filterClasses);
        document.getElementById('trainerFilter').addEventListener('change', filterClasses);
        document.getElementById('dayFilter').addEventListener('change', filterClasses);

        function filterClasses() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const status = document.getElementById('statusFilter').value;
            const trainer = document.getElementById('trainerFilter').value;
            const day = document.getElementById('dayFilter').value;
            
            const classCards = document.querySelectorAll('.class-card');

            classCards.forEach(card => {
                const name = card.getAttribute('data-name');
                const cardStatus = card.getAttribute('data-status');
                const cardTrainer = card.getAttribute('data-trainer');
                const cardDay = card.getAttribute('data-day');
                
                let show = true;
                
                // Search filter
                if (searchTerm && !name.includes(searchTerm)) {
                    show = false;
                }
                
                // Status filter
                if (status && show && cardStatus !== status) {
                    show = false;
                }
                
                // Trainer filter
                if (trainer && show && cardTrainer !== trainer) {
                    show = false;
                }
                
                // Day filter
                if (day && show && !cardDay.includes(day)) {
                    show = false;
                }
                
                card.style.display = show ? 'block' : 'none';
            });
        }

        // Delete class function
        function deleteClass(classId, className) {
            confirmDelete({
                url: '@Url.Action("DeleteConfirmed")' + '?id=' + classId,
                itemName: className,
                itemType: 'l·ªõp h·ªçc',
                onSuccess: function(data) {
                    location.reload();
                },
                onError: function(error) {
                    showNotification('C√≥ l·ªói x·∫£y ra khi x√≥a l·ªõp h·ªçc.', 'error');
                }
            });
        }
    </script>
}
