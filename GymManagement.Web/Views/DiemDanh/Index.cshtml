@model IEnumerable<GymManagement.Web.Data.Models.DiemDanh>
@{
    ViewData["Title"] = "Qu·∫£n l√Ω ƒëi·ªÉm danh";
    Layout = "_Layout";
}

<div class="p-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-3xl font-bold text-gray-900 mb-2">‚úÖ Qu·∫£n l√Ω ƒëi·ªÉm danh</h1>
            <p class="text-gray-600">Theo d√µi v√† qu·∫£n l√Ω ƒëi·ªÉm danh c·ªßa th√†nh vi√™n</p>
        </div>
        <div class="flex gap-3">
            <a href="@Url.Action("CheckIn")" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                üì± Check-in
            </a>
            <a href="@Url.Action("AttendanceReport")" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                üìä B√°o c√°o
            </a>
        </div>
    </div>

    <!-- Real-time Stats -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-green-100 text-green-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">H√¥m nay</p>
                    <p class="text-2xl font-bold text-gray-900" id="todayAttendance">@(Model?.Count(d => d.ThoiGian.Date == DateTime.Today) ?? 0)</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">T·ªïng c·ªông</p>
                    <p class="text-2xl font-bold text-gray-900">@(Model?.Count() ?? 0)</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-yellow-100 text-yellow-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Tu·∫ßn n√†y</p>
                    <p class="text-2xl font-bold text-gray-900">@(Model?.Count(d => d.ThoiGian >= DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek)) ?? 0)</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-purple-100 text-purple-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Nh·∫≠n di·ªán th√†nh c√¥ng</p>
                    <p class="text-2xl font-bold text-gray-900">@(Model?.Count(d => d.KetQuaNhanDang == true) ?? 0)</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div>
                <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-2">T√¨m ki·∫øm</label>
                <input type="text" id="searchInput" placeholder="T√™n th√†nh vi√™n..." 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent">
            </div>
            <div>
                <label for="statusFilter" class="block text-sm font-medium text-gray-700 mb-2">Tr·∫°ng th√°i</label>
                <select id="statusFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent">
                    <option value="">T·∫•t c·∫£</option>
                    <option value="Present">C√≥ m·∫∑t</option>
                    <option value="Absent">V·∫Øng m·∫∑t</option>
                    <option value="Late">ƒêi mu·ªôn</option>
                </select>
            </div>
            <div>
                <label for="recognitionFilter" class="block text-sm font-medium text-gray-700 mb-2">Nh·∫≠n di·ªán</label>
                <select id="recognitionFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent">
                    <option value="">T·∫•t c·∫£</option>
                    <option value="true">Th√†nh c√¥ng</option>
                    <option value="false">Th·∫•t b·∫°i</option>
                </select>
            </div>
            <div>
                <label for="dateFilter" class="block text-sm font-medium text-gray-700 mb-2">Ng√†y</label>
                <input type="date" id="dateFilter" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent">
            </div>
            <div class="flex items-end">
                <button onclick="exportAttendance()" class="w-full bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">
                    üìä Xu·∫•t Excel
                </button>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <!-- Attendance Table -->
        <div class="bg-white rounded-lg shadow-md overflow-hidden">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Th√†nh vi√™n</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Th·ªùi gian</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">L·ªõp h·ªçc</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tr·∫°ng th√°i</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nh·∫≠n di·ªán</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ghi ch√∫</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">H√†nh ƒë·ªông</th>
                        </tr>
                    </thead>
                    <tbody id="attendanceTable" class="bg-white divide-y divide-gray-200">
                        @foreach (var diemDanh in Model.OrderByDescending(d => d.ThoiGian))
                        {
                            <tr class="hover:bg-gray-50 attendance-row" 
                                data-member="@(diemDanh.ThanhVien?.Ho + " " + diemDanh.ThanhVien?.Ten)?.ToLower()"
                                data-status="@diemDanh.TrangThai"
                                data-recognition="@diemDanh.KetQuaNhanDang?.ToString().ToLower()"
                                data-date="@diemDanh.ThoiGian.ToString("yyyy-MM-dd")">
                                
                                <!-- Member -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-10 w-10">
                                            <div class="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center">
                                                <span class="text-sm font-medium text-green-600">
                                                    @(diemDanh.ThanhVien?.Ho?.FirstOrDefault() ?? 'U')
                                                </span>
                                            </div>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-gray-900">
                                                @diemDanh.ThanhVien?.Ho @diemDanh.ThanhVien?.Ten
                                            </div>
                                            <div class="text-sm text-gray-500">
                                                @diemDanh.ThanhVien?.Email
                                            </div>
                                        </div>
                                    </div>
                                </td>

                                <!-- Time -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@diemDanh.ThoiGian.ToString("dd/MM/yyyy")</div>
                                    <div class="text-sm text-gray-500">@diemDanh.ThoiGian.ToString("HH:mm:ss")</div>
                                </td>

                                <!-- Class -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (diemDanh.LichLop?.LopHoc != null)
                                    {
                                        <div class="text-sm font-medium text-gray-900">@diemDanh.LichLop.LopHoc.TenLop</div>
                                        <div class="text-sm text-gray-500">@diemDanh.LichLop.GioBatDau.ToString("HH:mm") - @diemDanh.LichLop.GioKetThuc.ToString("HH:mm")</div>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400">T·ª± do</span>
                                    }
                                </td>

                                <!-- Status -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                        @switch (diemDanh.TrangThai)
                                        {
                                            case "Present": <text>bg-green-100 text-green-800</text>; break;
                                            case "Absent": <text>bg-red-100 text-red-800</text>; break;
                                            case "Late": <text>bg-yellow-100 text-yellow-800</text>; break;
                                            default: <text>bg-gray-100 text-gray-800</text>; break;
                                        }">
                                        @switch (diemDanh.TrangThai)
                                        {
                                            case "Present": <text>C√≥ m·∫∑t</text>; break;
                                            case "Absent": <text>V·∫Øng m·∫∑t</text>; break;
                                            case "Late": <text>ƒêi mu·ªôn</text>; break;
                                            default: <text>@diemDanh.TrangThai</text>; break;
                                        }
                                    </span>
                                </td>

                                <!-- Recognition -->
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (diemDanh.KetQuaNhanDang.HasValue)
                                    {
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @(diemDanh.KetQuaNhanDang.Value ? "bg-blue-100 text-blue-800" : "bg-red-100 text-red-800")">
                                            @(diemDanh.KetQuaNhanDang.Value ? "‚úÖ Th√†nh c√¥ng" : "‚ùå Th·∫•t b·∫°i")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400">Th·ªß c√¥ng</span>
                                    }
                                </td>

                                <!-- Notes -->
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @if (!string.IsNullOrEmpty(diemDanh.GhiChu))
                                    {
                                        <span title="@diemDanh.GhiChu">@(diemDanh.GhiChu.Length > 30 ? diemDanh.GhiChu.Substring(0, 30) + "..." : diemDanh.GhiChu)</span>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400">-</span>
                                    }
                                </td>

                                <!-- Actions -->
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div class="flex space-x-2">
                                        <button onclick="viewAttendanceDetails(@diemDanh.DiemDanhId)" 
                                                class="text-blue-600 hover:text-blue-900">
                                            üëÅÔ∏è Chi ti·∫øt
                                        </button>
                                        @if (!string.IsNullOrEmpty(diemDanh.AnhMinhChung))
                                        {
                                            <button onclick="viewImage('@diemDanh.AnhMinhChung')" 
                                                    class="text-green-600 hover:text-green-900">
                                                üñºÔ∏è ·∫¢nh
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <!-- Empty State -->
        <div class="bg-white rounded-lg shadow-md p-12 text-center">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Ch∆∞a c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh</h3>
            <p class="text-gray-600 mb-4">H·ªá th·ªëng ch∆∞a c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh n√†o.</p>
            <a href="@Url.Action("CheckIn")" class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
                üì± B·∫Øt ƒë·∫ßu check-in
            </a>
        </div>
    }
</div>

<!-- Attendance Details Modal -->
<div id="attendanceModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Chi ti·∫øt ƒëi·ªÉm danh</h3>
                    <button onclick="closeAttendanceModal()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <div id="attendanceDetails">
                    <!-- Attendance details will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Modal -->
<div id="imageModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">·∫¢nh minh ch·ª©ng</h3>
                    <button onclick="closeImageModal()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <div id="imageContent" class="text-center">
                    <!-- Image will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Auto-refresh stats every 30 seconds
        setInterval(updateRealtimeStats, 30000);

        // Search and filter functionality
        document.getElementById('searchInput').addEventListener('input', filterAttendance);
        document.getElementById('statusFilter').addEventListener('change', filterAttendance);
        document.getElementById('recognitionFilter').addEventListener('change', filterAttendance);
        document.getElementById('dateFilter').addEventListener('change', filterAttendance);

        function filterAttendance() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const status = document.getElementById('statusFilter').value;
            const recognition = document.getElementById('recognitionFilter').value;
            const date = document.getElementById('dateFilter').value;
            
            const attendanceRows = document.querySelectorAll('.attendance-row');

            attendanceRows.forEach(row => {
                const member = row.getAttribute('data-member') || '';
                const rowStatus = row.getAttribute('data-status');
                const rowRecognition = row.getAttribute('data-recognition');
                const rowDate = row.getAttribute('data-date');
                
                let show = true;
                
                // Search filter
                if (searchTerm && !member.includes(searchTerm)) {
                    show = false;
                }
                
                // Status filter
                if (status && show && rowStatus !== status) {
                    show = false;
                }
                
                // Recognition filter
                if (recognition && show && rowRecognition !== recognition) {
                    show = false;
                }
                
                // Date filter
                if (date && show && rowDate !== date) {
                    show = false;
                }
                
                row.style.display = show ? '' : 'none';
            });
        }

        function updateRealtimeStats() {
            fetch('@Url.Action("GetRealtimeStats")')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('todayAttendance').textContent = data.todayAttendance;
                })
                .catch(error => console.error('Error updating stats:', error));
        }

        function viewAttendanceDetails(attendanceId) {
            // Show loading
            document.getElementById('attendanceDetails').innerHTML = '<div class="text-center py-4">ƒêang t·∫£i...</div>';
            document.getElementById('attendanceModal').classList.remove('hidden');
            
            // Load attendance details (placeholder - implement with actual API call)
            setTimeout(() => {
                document.getElementById('attendanceDetails').innerHTML = `
                    <div class="space-y-4">
                        <p><strong>ID ƒêi·ªÉm danh:</strong> ${attendanceId}</p>
                        <p><strong>Chi ti·∫øt:</strong> S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau</p>
                    </div>
                `;
            }, 500);
        }

        function viewImage(imagePath) {
            document.getElementById('imageContent').innerHTML = `
                <img src="${imagePath}" alt="·∫¢nh minh ch·ª©ng" class="max-w-full h-auto rounded-lg">
            `;
            document.getElementById('imageModal').classList.remove('hidden');
        }

        function exportAttendance() {
            const startDate = document.getElementById('dateFilter').value || new Date(Date.now() - 7*24*60*60*1000).toISOString().split('T')[0];
            const endDate = new Date().toISOString().split('T')[0];
            
            window.location.href = `@Url.Action("ExportAttendance")?startDate=${startDate}&endDate=${endDate}&format=csv`;
        }

        function closeAttendanceModal() {
            document.getElementById('attendanceModal').classList.add('hidden');
        }

        function closeImageModal() {
            document.getElementById('imageModal').classList.add('hidden');
        }

        // Close modals when clicking outside
        document.getElementById('attendanceModal').addEventListener('click', function(e) {
            if (e.target === this) closeAttendanceModal();
        });

        document.getElementById('imageModal').addEventListener('click', function(e) {
            if (e.target === this) closeImageModal();
        });
    </script>
}
