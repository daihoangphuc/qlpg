@{
    ViewData["Title"] = "Reception Check-in Station";
    Layout = "_Layout";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow: hidden;
            height: 100vh;
        }
        
        .reception-container {
            height: 100vh;
            display: flex;
            flex-direction: column;
            color: white;
            position: relative;
        }
        
        .header {
            text-align: center;
            padding: 20px;
            background: rgba(0,0,0,0.2);
            backdrop-filter: blur(10px);
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin: 0;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 20px;
        }

        /* Tab Navigation */
        .tab-navigation {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }

        .tab-button {
            background: rgba(255,255,255,0.1);
            border: none;
            color: white;
            padding: 15px 30px;
            margin: 0 10px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1.1rem;
            font-weight: bold;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .tab-button:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-2px);
        }

        .tab-button.active {
            background: rgba(255,255,255,0.3);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .tab-content {
            flex: 1;
            display: none;
        }

        .tab-content.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Fixed Price Display Styles */
        .fixed-price-display {
            margin: 15px 0;
        }

        .price-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 15px;
            padding: 20px;
            color: white;
            position: relative;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .price-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
        }

        .price-info h4 {
            margin: 0 0 8px 0;
            font-size: 1.3rem;
            font-weight: bold;
        }

        .price-amount {
            font-size: 2rem;
            font-weight: bold;
            margin: 10px 0;
            color: #FFD700;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .price-description {
            margin: 8px 0 0 0;
            font-size: 0.9rem;
            opacity: 0.9;
            line-height: 1.4;
        }

        .price-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #FF6B6B;
            color: white;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
            box-shadow: 0 4px 12px rgba(255, 107, 107, 0.4);
        }

        .badge-text {
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .camera-section {
            text-align: center;
            max-width: 800px;
            width: 100%;
        }
        
        #video {
            width: 640px;
            height: 480px;
            border: 4px solid rgba(255,255,255,0.3);
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            background: #000;
        }
        
        .status-display {
            margin-top: 30px;
            padding: 20px;
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
        
        .member-info {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 10px;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .time-display {
            font-size: 1.2rem;
            opacity: 0.8;
        }
        
        .stats-bar {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0,0,0,0.3);
            backdrop-filter: blur(10px);
            padding: 15px;
            display: flex;
            justify-content: space-around;
            text-align: center;
        }
        
        .stat-item {
            flex: 1;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            display: block;
        }
        
        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        .success-animation {
            animation: successPulse 2s ease-in-out;
        }
        
        .error-animation {
            animation: errorShake 0.5s ease-in-out;
        }
        
        @@keyframes successPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        @@keyframes errorShake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
        }
        
        .instructions {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            font-size: 1.5rem;
            color: rgba(255,255,255,0.7);
        }
        
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }
        
        @@keyframes spin {
            to { transform: rotate(360deg); }
        }

        .member-details-panel {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.9);
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            animation: fadeIn 0.3s ease-in-out;
        }

        .member-details-panel.hidden {
            display: none;
        }

        .details-content {
            background: rgba(255,255,255,0.1);
            border-radius: 20px;
            padding: 40px;
            max-width: 800px;
            width: 90%;
            text-align: center;
        }

        .member-header {
            margin-bottom: 30px;
        }

        .member-avatar {
            width: 80px;
            height: 80px;
            background: rgba(255,255,255,0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
        }

        .member-name {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .member-email {
            font-size: 1.1rem;
            opacity: 0.8;
        }

        .details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .detail-card {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
        }

        .detail-icon {
            font-size: 2rem;
            margin-bottom: 10px;
        }

        .detail-label {
            font-size: 0.9rem;
            opacity: 0.8;
            margin-bottom: 5px;
        }

        .detail-value {
            font-size: 1.1rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .detail-sub {
            font-size: 0.8rem;
            opacity: 0.7;
        }

        @@keyframes fadeIn {
            from { opacity: 0; transform: scale(0.9); }
            to { opacity: 1; transform: scale(1); }
        }

        /* Walk-In Styles */
        .walk-in-container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
        }

        .walk-in-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            height: 100%;
        }

        .walk-in-card {
            background: rgba(255,255,255,0.1);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            overflow: hidden;
        }

        .card-header {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-header h3 {
            margin: 0;
            font-size: 1.3rem;
            color: white;
        }

        .card-body {
            padding: 20px;
            height: 400px;
            overflow-y: auto;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: white;
            font-weight: bold;
        }

        .form-input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid rgba(255,255,255,0.2);
            border-radius: 10px;
            background: rgba(255,255,255,0.1);
            color: white;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: rgba(255,255,255,0.5);
            background: rgba(255,255,255,0.15);
        }

        .form-input::placeholder {
            color: rgba(255,255,255,0.6);
        }

        .payment-methods {
            display: flex;
            gap: 15px;
        }

        .payment-option {
            display: flex;
            align-items: center;
            gap: 8px;
            color: white;
            cursor: pointer;
            padding: 10px 15px;
            border-radius: 8px;
            background: rgba(255,255,255,0.1);
            transition: all 0.3s ease;
        }

        .payment-option:hover {
            background: rgba(255,255,255,0.2);
        }

        .payment-option input[type="radio"] {
            margin: 0;
        }

        .btn-primary {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #4CAF50, #45a049);
            border: none;
            border-radius: 10px;
            color: white;
            font-size: 1.1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-text, .btn-loading {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .btn-loading.hidden {
            display: none;
        }

        .btn-refresh {
            background: rgba(255,255,255,0.2);
            border: none;
            border-radius: 8px;
            color: white;
            padding: 8px 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-refresh:hover {
            background: rgba(255,255,255,0.3);
            transform: rotate(180deg);
        }

        .walk-in-list {
            max-height: 350px;
            overflow-y: auto;
        }

        .walk-in-item {
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .walk-in-item:hover {
            background: rgba(255,255,255,0.15);
        }

        .guest-info {
            flex: 1;
        }

        .guest-name {
            font-weight: bold;
            color: white;
            margin-bottom: 5px;
        }

        .guest-details {
            font-size: 0.9rem;
            color: rgba(255,255,255,0.7);
        }

        .session-status {
            text-align: right;
        }

        .status-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .status-active {
            background: #4CAF50;
            color: white;
        }

        .status-completed {
            background: #757575;
            color: white;
        }

        .session-time {
            font-size: 0.9rem;
            color: rgba(255,255,255,0.7);
        }

        .btn-checkout {
            background: #ff6b6b;
            border: none;
            border-radius: 6px;
            color: white;
            padding: 6px 12px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 5px;
        }

        .btn-checkout:hover {
            background: #ff5252;
            transform: translateY(-1px);
        }

        .loading-message {
            text-align: center;
            color: rgba(255,255,255,0.7);
            padding: 40px 20px;
        }

        .empty-message {
            text-align: center;
            color: rgba(255,255,255,0.7);
            padding: 40px 20px;
            font-style: italic;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .walk-in-grid {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .payment-methods {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="reception-container">
        <!-- Header -->
        <div class="header">
            <h1>🏋️ GYM RECEPTION STATION</h1>
            <p>Hệ thống check-in tự động bằng nhận diện khuôn mặt</p>
        </div>
        
        <!-- Main Content -->
        <div class="main-content">
            <!-- Tab Navigation -->
            <div class="tab-navigation">
                <button class="tab-button active" onclick="switchTab('face-recognition')">
                    👁️ Nhận diện khuôn mặt
                </button>
                <button class="tab-button" onclick="switchTab('walk-in')">
                    🚶 Khách vãng lai
                </button>
            </div>

            <!-- Face Recognition Tab -->
            <div id="face-recognition-tab" class="tab-content active">
                <div class="camera-section">
                    <!-- Camera Display -->
                    <video id="video" autoplay muted playsinline>
                        <div class="instructions">
                            📷 Đang khởi động camera...
                        </div>
                    </video>

                    <!-- Status Display -->
                    <div class="status-display">
                        <div class="member-info" id="memberInfo">
                            👁️ Nhìn vào camera để check-in/check-out
                        </div>
                        <div class="time-display" id="timeDisplay">
                        🕐 --:--:--
                    </div>
                </div>

                <!-- Member Details Panel (Hidden by default) -->
                <div id="memberDetailsPanel" class="member-details-panel hidden">
                    <div class="details-content">
                        <div class="member-header">
                            <div class="member-avatar">
                                <svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                            </div>
                            <div class="member-name" id="memberName">--</div>
                            <div class="member-email" id="memberEmail">--</div>
                        </div>

                        <div class="details-grid">
                            <div class="detail-card">
                                <div class="detail-icon">📦</div>
                                <div class="detail-content">
                                    <div class="detail-label">Gói tập hiện tại</div>
                                    <div class="detail-value" id="currentPackage">--</div>
                                    <div class="detail-sub" id="packageExpiry">--</div>
                                </div>
                            </div>

                            <div class="detail-card">
                                <div class="detail-icon">🏃</div>
                                <div class="detail-content">
                                    <div class="detail-label">Lớp học đã đăng ký</div>
                                    <div class="detail-value" id="registeredClasses">--</div>
                                </div>
                            </div>

                            <div class="detail-card">
                                <div class="detail-icon">💳</div>
                                <div class="detail-content">
                                    <div class="detail-label">Thanh toán gần nhất</div>
                                    <div class="detail-value" id="lastPayment">--</div>
                                    <div class="detail-sub" id="paymentStatus">--</div>
                                </div>
                            </div>

                            <div class="detail-card">
                                <div class="detail-icon">📊</div>
                                <div class="detail-content">
                                    <div class="detail-label">Check-in gần đây</div>
                                    <div class="detail-value" id="recentCheckIns">--</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Walk-In Tab -->
            <div id="walk-in-tab" class="tab-content">
                <div class="walk-in-container">
                    <div class="walk-in-grid">
                        <!-- Registration Form -->
                        <div class="walk-in-card">
                            <div class="card-header">
                                <h3>📝 Đăng ký khách vãng lai</h3>
                            </div>
                            <div class="card-body">
                                <form id="walkInForm">
                                    <div class="form-group">
                                        <label>Họ và tên *</label>
                                        <input type="text" id="guestName" class="form-input" placeholder="Nguyễn Văn A" required>
                                    </div>
                                    <div class="form-group">
                                        <label>Số điện thoại</label>
                                        <input type="tel" id="guestPhone" class="form-input" placeholder="0123456789">
                                    </div>
                                    <div class="form-group">
                                        <label>Gói vé</label>
                                        <div class="fixed-price-display">
                                            <div class="price-card">
                                                <div class="price-info">
                                                    <h4 id="fixedPackageName">Vé tập một buổi</h4>
                                                    <p class="price-amount" id="fixedPackagePrice">15,000 VNĐ</p>
                                                    <p class="price-description" id="fixedPackageDescription">Vé tập một buổi trong ngày với giá cố định</p>
                                                </div>
                                                <div class="price-badge">
                                                    <span class="badge-text">Giá cố định</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Phương thức thanh toán *</label>
                                        <div class="payment-methods">
                                            <label class="payment-option">
                                                <input type="radio" name="paymentMethod" value="CASH" checked>
                                                <span>💵 Tiền mặt</span>
                                            </label>
                                            <label class="payment-option">
                                                <input type="radio" name="paymentMethod" value="BANK">
                                                <span>🏦 Chuyển khoản</span>
                                            </label>
                                        </div>
                                    </div>
                                    <button type="submit" class="btn-primary">
                                        <span class="btn-text">Đăng ký và thanh toán</span>
                                        <span class="btn-loading hidden">
                                            <div class="loading-spinner"></div>
                                            Đang xử lý...
                                        </span>
                                    </button>
                                </form>
                            </div>
                        </div>

                        <!-- Today's Walk-ins -->
                        <div class="walk-in-card">
                            <div class="card-header">
                                <h3>👥 Khách vãng lai hôm nay</h3>
                                <button onclick="refreshWalkInList()" class="btn-refresh">🔄</button>
                            </div>
                            <div class="card-body">
                                <div id="walkInList" class="walk-in-list">
                                    <div class="loading-message">
                                        <div class="loading-spinner"></div>
                                        Đang tải danh sách...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Statistics Bar -->
        <div class="stats-bar">
            <div class="stat-item">
                <span class="stat-number" id="todayCount">0</span>
                <span class="stat-label">Hôm nay</span>
            </div>
            <div class="stat-item">
                <span class="stat-number" id="currentCount">0</span>
                <span class="stat-label">Đang tập</span>
            </div>
            <div class="stat-item">
                <span class="stat-number" id="successRate">0%</span>
                <span class="stat-label">Tỷ lệ thành công</span>
            </div>
            <div class="stat-item">
                <span class="stat-number" id="lastUpdate">--:--</span>
                <span class="stat-label">Cập nhật cuối</span>
            </div>
        </div>
    </div>

    <!-- Face-API.js -->
    <script src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>
    
    <script>
        class ReceptionStation {
            constructor() {
                this.video = document.getElementById('video');
                this.memberInfo = document.getElementById('memberInfo');
                this.timeDisplay = document.getElementById('timeDisplay');
                this.isModelLoaded = false;
                this.isProcessing = false;
                this.lastProcessTime = 0;
                this.processInterval = 2000; // 2 seconds between scans
                this.stats = {
                    todayCount: 0,
                    currentCount: 0,
                    successCount: 0,
                    totalAttempts: 0
                };
            }
            
            async init() {
                try {
                    this.updateStatus('🔄 Đang tải mô hình AI...', 'loading');
                    
                    // Load Face-API.js models
                    await faceapi.nets.tinyFaceDetector.loadFromUri('/lib/face-api/models');
                    await faceapi.nets.faceRecognitionNet.loadFromUri('/lib/face-api/models');
                    
                    this.isModelLoaded = true;
                    this.updateStatus('📷 Đang khởi động camera...', 'loading');
                    
                    // Start camera
                    await this.startCamera();
                    
                    // Start continuous scanning
                    this.startScanning();
                    
                    // Start time update
                    this.startTimeUpdate();
                    
                    // Load initial stats
                    await this.loadStats();
                    
                    this.updateStatus('👁️ Nhìn vào camera để check-in/check-out', 'ready');
                    
                } catch (error) {
                    console.error('Initialization error:', error);
                    this.updateStatus('❌ Lỗi khởi động hệ thống. Vui lòng liên hệ IT.', 'error');
                }
            }
            
            async startCamera() {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({
                        video: {
                            width: { ideal: 640 },
                            height: { ideal: 480 },
                            facingMode: 'user'
                        }
                    });
                    
                    this.video.srcObject = stream;
                    
                    return new Promise((resolve) => {
                        this.video.onloadedmetadata = () => {
                            resolve();
                        };
                    });
                } catch (error) {
                    console.error('Camera error:', error);
                    throw new Error('Không thể truy cập camera');
                }
            }
            
            startScanning() {
                setInterval(async () => {
                    if (this.isModelLoaded && !this.isProcessing) {
                        const now = Date.now();
                        if (now - this.lastProcessTime > this.processInterval) {
                            await this.scanForFace();
                            this.lastProcessTime = now;
                        }
                    }
                }, 500); // Check every 500ms
            }
            
            async scanForFace() {
                try {
                    if (!this.video.videoWidth || !this.video.videoHeight) {
                        return;
                    }
                    
                    const detection = await faceapi
                        .detectSingleFace(this.video, new faceapi.TinyFaceDetectorOptions())
                        .withFaceDescriptor();
                    
                    if (detection) {
                        this.isProcessing = true;
                        this.updateStatus('🔍 Đang nhận diện...', 'processing');
                        
                        const result = await this.processCheckIn(detection.descriptor);
                        this.handleCheckInResult(result);
                        
                        // Reset after 3 seconds
                        setTimeout(() => {
                            this.isProcessing = false;
                            this.updateStatus('👁️ Nhìn vào camera để check-in/check-out', 'ready');
                        }, 3000);
                    }
                } catch (error) {
                    console.error('Face scanning error:', error);
                    this.isProcessing = false;
                }
            }
            
            async processCheckIn(faceDescriptor) {
                try {
                    const response = await fetch('/Reception/AutoCheckIn', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify({
                            descriptor: Array.from(faceDescriptor)
                        })
                    });
                    
                    return await response.json();
                } catch (error) {
                    console.error('Check-in API error:', error);
                    return { success: false, message: 'Lỗi kết nối. Vui lòng thử lại.' };
                }
            }
            
            handleCheckInResult(result) {
                this.stats.totalAttempts++;

                if (result.success) {
                    this.stats.successCount++;

                    if (result.action === 'checkin') {
                        this.updateStatus(`✅ Chào mừng ${result.memberName}!<br>Check-in lúc ${result.time}`, 'success');
                        this.stats.todayCount++;
                        this.stats.currentCount++;
                        this.playSuccessSound();

                        // Show detailed member information
                        if (result.memberDetails) {
                            this.showMemberDetails(result.memberDetails, result.memberName);
                        }

                    } else if (result.action === 'checkout') {
                        this.updateStatus(`👋 Tạm biệt ${result.memberName}!<br>Tập ${result.duration} - Cảm ơn bạn!`, 'success');
                        this.stats.currentCount--;
                        this.playSuccessSound();

                        // Show session summary
                        if (result.sessionSummary) {
                            this.showSessionSummary(result.sessionSummary, result.memberName);
                        }
                    }

                    this.video.parentElement.classList.add('success-animation');
                    setTimeout(() => {
                        this.video.parentElement.classList.remove('success-animation');
                    }, 2000);

                } else {
                    this.updateStatus(`❌ ${result.message}`, 'error');
                    this.video.parentElement.classList.add('error-animation');
                    setTimeout(() => {
                        this.video.parentElement.classList.remove('error-animation');
                    }, 500);
                    this.playErrorSound();
                }

                this.updateStatsDisplay();
            }

            showMemberDetails(memberDetails, memberName) {
                try {
                    // Update member header
                    document.getElementById('memberName').textContent = memberDetails.personalInfo?.fullName || memberName;
                    document.getElementById('memberEmail').textContent = memberDetails.personalInfo?.email || 'Không có email';

                    // Update current package
                    if (memberDetails.currentPackage) {
                        document.getElementById('currentPackage').textContent = memberDetails.currentPackage.name;
                        document.getElementById('packageExpiry').textContent =
                            `Hết hạn: ${memberDetails.currentPackage.expiryDate} (${memberDetails.currentPackage.remainingDays} ngày)`;
                    } else {
                        document.getElementById('currentPackage').textContent = 'Chưa có gói tập';
                        document.getElementById('packageExpiry').textContent = 'Vui lòng đăng ký gói tập';
                    }

                    // Update registered classes
                    if (memberDetails.registeredClasses && memberDetails.registeredClasses.length > 0) {
                        const classNames = memberDetails.registeredClasses.map(c => c.name).join(', ');
                        document.getElementById('registeredClasses').textContent = classNames;
                    } else {
                        document.getElementById('registeredClasses').textContent = 'Chưa đăng ký lớp nào';
                    }

                    // Update payment status
                    if (memberDetails.paymentStatus) {
                        document.getElementById('lastPayment').textContent = memberDetails.paymentStatus.amount;
                        document.getElementById('paymentStatus').textContent =
                            `${memberDetails.paymentStatus.lastPaymentDate} - ${memberDetails.paymentStatus.status}`;
                    } else {
                        document.getElementById('lastPayment').textContent = 'Chưa có thanh toán';
                        document.getElementById('paymentStatus').textContent = 'Vui lòng thanh toán';
                    }

                    // Update recent check-ins
                    if (memberDetails.recentCheckIns && memberDetails.recentCheckIns.length > 0) {
                        const recentText = `${memberDetails.recentCheckIns.length} lần gần đây`;
                        document.getElementById('recentCheckIns').textContent = recentText;
                    } else {
                        document.getElementById('recentCheckIns').textContent = 'Lần đầu check-in';
                    }

                    // Show the panel
                    document.getElementById('memberDetailsPanel').classList.remove('hidden');

                    // Auto hide after 8 seconds
                    setTimeout(() => {
                        this.hideMemberDetails();
                    }, 8000);

                } catch (error) {
                    console.error('Error showing member details:', error);
                }
            }

            showSessionSummary(sessionSummary, memberName) {
                try {
                    // Update member header
                    document.getElementById('memberName').textContent = memberName;
                    document.getElementById('memberEmail').textContent = 'Phiên tập kết thúc';

                    // Update session info
                    document.getElementById('currentPackage').textContent = sessionSummary.sessionDuration;
                    document.getElementById('packageExpiry').textContent =
                        `${sessionSummary.checkInTime} - ${sessionSummary.checkOutTime}`;

                    document.getElementById('registeredClasses').textContent = `${sessionSummary.caloriesBurned} calories`;
                    document.getElementById('lastPayment').textContent = sessionSummary.totalTimeToday;
                    document.getElementById('paymentStatus').textContent = 'Tổng thời gian hôm nay';
                    document.getElementById('recentCheckIns').textContent = sessionSummary.message;

                    // Show the panel
                    document.getElementById('memberDetailsPanel').classList.remove('hidden');

                    // Auto hide after 6 seconds
                    setTimeout(() => {
                        this.hideMemberDetails();
                    }, 6000);

                } catch (error) {
                    console.error('Error showing session summary:', error);
                }
            }

            hideMemberDetails() {
                document.getElementById('memberDetailsPanel').classList.add('hidden');
            }
            
            updateStatus(message, type) {
                this.memberInfo.innerHTML = message;
                
                // Update styling based on type
                this.memberInfo.className = 'member-info';
                switch (type) {
                    case 'success':
                        this.memberInfo.style.color = '#10b981';
                        break;
                    case 'error':
                        this.memberInfo.style.color = '#ef4444';
                        break;
                    case 'processing':
                        this.memberInfo.style.color = '#3b82f6';
                        break;
                    case 'loading':
                        this.memberInfo.style.color = '#f59e0b';
                        break;
                    default:
                        this.memberInfo.style.color = 'white';
                }
            }
            
            startTimeUpdate() {
                setInterval(() => {
                    const now = new Date();
                    this.timeDisplay.textContent = `🕐 ${now.toLocaleTimeString('vi-VN')}`;
                }, 1000);
            }
            
            async loadStats() {
                try {
                    const response = await fetch('/Reception/GetGymStats');
                    const data = await response.json();
                    
                    if (data.success) {
                        this.stats.todayCount = data.todayTotal;
                        this.stats.currentCount = data.currentlyInGym;
                        this.updateStatsDisplay();
                    }
                } catch (error) {
                    console.error('Error loading stats:', error);
                }
            }
            
            updateStatsDisplay() {
                document.getElementById('todayCount').textContent = this.stats.todayCount;
                document.getElementById('currentCount').textContent = this.stats.currentCount;
                
                const successRate = this.stats.totalAttempts > 0 
                    ? Math.round((this.stats.successCount / this.stats.totalAttempts) * 100)
                    : 0;
                document.getElementById('successRate').textContent = `${successRate}%`;
                
                document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }
            
            playSuccessSound() {
                // Create success sound
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                oscillator.frequency.setValueAtTime(1000, audioContext.currentTime + 0.1);
                
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.3);
            }
            
            playErrorSound() {
                // Create error sound
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(400, audioContext.currentTime);
                oscillator.frequency.setValueAtTime(300, audioContext.currentTime + 0.1);
                
                gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.2);
            }
        }

        // Walk-In Management Functions
        class WalkInManager {
            constructor() {
                this.packages = [];
                this.sessions = [];
                this.init();
            }

            async init() {
                await this.loadPackages();
                await this.loadTodaySessions();
                this.setupEventListeners();
            }

            setupEventListeners() {
                const form = document.getElementById('walkInForm');
                if (form) {
                    form.addEventListener('submit', (e) => this.handleFormSubmit(e));
                }
            }

            async loadPackages() {
                try {
                    const response = await fetch('/Reception/GetAvailablePackages');
                    const data = await response.json();

                    if (data.success && data.packages.length > 0) {
                        this.packages = data.packages;
                        this.displayFixedPrice(data.packages[0]); // Hiển thị gói cố định
                    }
                } catch (error) {
                    console.error('Error loading packages:', error);
                }
            }

            displayFixedPrice(packageData) {
                // Cập nhật thông tin gói cố định trong giao diện
                const nameElement = document.getElementById('fixedPackageName');
                const priceElement = document.getElementById('fixedPackagePrice');
                const descriptionElement = document.getElementById('fixedPackageDescription');

                if (nameElement) nameElement.textContent = packageData.name;
                if (priceElement) priceElement.textContent = packageData.formattedPrice;
                if (descriptionElement) descriptionElement.textContent = packageData.description;
            }

            // Backward compatibility - không còn sử dụng
            populatePackageSelect() {
                // Method này không còn cần thiết với mô hình giá cố định
                return;

                select.innerHTML = '<option value="">-- Chọn gói vé --</option>';
                this.packages.forEach(pkg => {
                    const option = document.createElement('option');
                    option.value = JSON.stringify({
                        id: pkg.id,
                        name: pkg.name,
                        price: pkg.price
                    });
                    option.textContent = `${pkg.name} - ${pkg.formattedPrice}`;
                    select.appendChild(option);
                });
            }

            async handleFormSubmit(e) {
                e.preventDefault();

                const submitBtn = e.target.querySelector('button[type="submit"]');
                const btnText = submitBtn.querySelector('.btn-text');
                const btnLoading = submitBtn.querySelector('.btn-loading');

                try {
                    // Show loading state
                    btnText.classList.add('hidden');
                    btnLoading.classList.remove('hidden');
                    submitBtn.disabled = true;

                    const formData = new FormData(e.target);
                    const guestName = formData.get('guestName') || document.getElementById('guestName').value;
                    const guestPhone = formData.get('guestPhone') || document.getElementById('guestPhone').value;
                    const paymentMethod = formData.get('paymentMethod') || document.querySelector('input[name="paymentMethod"]:checked').value;

                    // Sử dụng gói cố định thay vì chọn từ dropdown
                    const packageData = this.packages[0]; // Luôn sử dụng gói cố định đầu tiên

                    // Step 1: Register guest
                    const guestResponse = await fetch('/Reception/WalkInRegisterQuick', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            fullName: guestName,
                            phoneNumber: guestPhone
                        })
                    });

                    const guestData = await guestResponse.json();
                    if (!guestData.success) {
                        throw new Error(guestData.message);
                    }

                    // Step 2: Create payment với giá cố định
                    const paymentResponse = await fetch('/Reception/WalkInCreatePayment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            guestId: guestData.guest.id,
                            paymentMethod: paymentMethod
                            // Không cần truyền packageType, packageName, price vì đã cố định
                        })
                    });

                    const paymentData = await paymentResponse.json();
                    if (!paymentData.success) {
                        throw new Error(paymentData.message);
                    }

                    // Show success message
                    this.showMessage(paymentData.message, 'success');

                    // Reset form
                    e.target.reset();

                    // Refresh sessions list
                    await this.loadTodaySessions();

                } catch (error) {
                    console.error('Error processing walk-in:', error);
                    this.showMessage(error.message || 'Có lỗi xảy ra. Vui lòng thử lại.', 'error');
                } finally {
                    // Hide loading state
                    btnText.classList.remove('hidden');
                    btnLoading.classList.add('hidden');
                    submitBtn.disabled = false;
                }
            }

            async loadTodaySessions() {
                try {
                    const response = await fetch('/Reception/GetTodayWalkIns');
                    const data = await response.json();

                    if (data.success) {
                        this.sessions = data.sessions;
                        this.renderSessionsList();
                    }
                } catch (error) {
                    console.error('Error loading sessions:', error);
                }
            }

            renderSessionsList() {
                const container = document.getElementById('walkInList');
                if (!container) return;

                if (this.sessions.length === 0) {
                    container.innerHTML = '<div class="empty-message">Chưa có khách vãng lai nào hôm nay</div>';
                    return;
                }

                const html = this.sessions.map(session => `
                    <div class="walk-in-item">
                        <div class="guest-info">
                            <div class="guest-name">${session.guestName}</div>
                            <div class="guest-details">
                                ${session.phoneNumber ? `📞 ${session.phoneNumber} • ` : ''}
                                🎫 ${session.packageName}
                            </div>
                        </div>
                        <div class="session-status">
                            <div class="status-badge ${session.isActive ? 'status-active' : 'status-completed'}">
                                ${session.isActive ? '🟢 Đang tập' : '⚫ Đã xong'}
                            </div>
                            <div class="session-time">
                                Vào: ${session.checkInTime}
                                ${session.checkOutTime ? ` • Ra: ${session.checkOutTime}` : ''}
                            </div>
                            ${session.isActive ? `
                                <button class="btn-checkout" onclick="walkInManager.checkOutGuest(${session.diemDanhId})">
                                    Check-out
                                </button>
                            ` : ''}
                        </div>
                    </div>
                `).join('');

                container.innerHTML = html;
            }

            async checkOutGuest(diemDanhId) {
                try {
                    const response = await fetch('/Reception/WalkInCheckOut', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ diemDanhId })
                    });

                    const data = await response.json();
                    if (data.success) {
                        this.showMessage(data.message, 'success');
                        await this.loadTodaySessions();
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    console.error('Error checking out guest:', error);
                    this.showMessage(error.message || 'Có lỗi xảy ra khi check-out', 'error');
                }
            }

            showMessage(message, type = 'info') {
                // Simple toast notification
                const toast = document.createElement('div');
                toast.className = `toast toast-${type}`;
                toast.textContent = message;
                toast.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
                    color: white;
                    padding: 15px 20px;
                    border-radius: 5px;
                    z-index: 10000;
                    animation: slideIn 0.3s ease;
                `;

                document.body.appendChild(toast);
                setTimeout(() => {
                    toast.remove();
                }, 3000);
            }
        }

        // Tab switching function
        function switchTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });

            // Remove active class from all buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });

            // Show selected tab
            document.getElementById(tabName + '-tab').classList.add('active');

            // Add active class to clicked button
            event.target.classList.add('active');
        }

        // Refresh walk-in list function
        function refreshWalkInList() {
            if (window.walkInManager) {
                window.walkInManager.loadTodaySessions();
            }
        }

        // Global walk-in manager instance
        let walkInManager;

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', async () => {
            const station = new ReceptionStation();
            await station.init();

            // Initialize walk-in manager
            walkInManager = new WalkInManager();
            window.walkInManager = walkInManager;
        });
        
        // Handle page visibility changes
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                // Page is hidden, pause processing
                console.log('Reception station paused');
            } else {
                // Page is visible, resume processing
                console.log('Reception station resumed');
            }
        });
        
        // Handle beforeunload to cleanup camera
        window.addEventListener('beforeunload', () => {
            const video = document.getElementById('video');
            if (video.srcObject) {
                video.srcObject.getTracks().forEach(track => track.stop());
            }
        });
    </script>
</body>
</html>
